"use strict";(self.webpackChunkegoexo_docs=self.webpackChunkegoexo_docs||[]).push([[484],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),d=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(a),m=n,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return a?r.createElement(f,i(i({ref:t},c),{},{components:a})):r.createElement(f,i({ref:t},c))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var d=2;d<o;d++)i[d]=a[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2062:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const o={title:"Features",sidebar_position:10},i=void 0,l={unversionedId:"data/features",id:"data/features",title:"Features",description:"Pre-extracted features for the dataset, for accessibility & quick iteration purposes.",source:"@site/docs/data/features.md",sourceDirName:"data",slug:"/data/features",permalink:"/data/features",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Features",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Downscaled Takes",permalink:"/data/downscaled_takes"},next:{title:"Unprocessed Data & Captures",permalink:"/data/unprocessed"}},s={},d=[{value:"How Features are Extracted (What is Input to the Model)",id:"how-features-are-extracted-what-is-input-to-the-model",level:2},{value:"What Features are Available",id:"what-features-are-available",level:2},{value:"How to Read the Features",id:"how-to-read-the-features",level:2}],c={toc:d},p="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(p,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Pre-extracted features for the dataset, for accessibility & quick iteration purposes."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{parentName:"p",href:"/download/"},"Download")," with ",(0,n.kt)("inlineCode",{parentName:"p"},"--parts features/omnivore_video"))),(0,n.kt)("p",null,"These are extracted with the same code as Ego4D and hence are the same: ",(0,n.kt)("a",{parentName:"p",href:"https://ego4d-data.org/docs/data/features/#description"},"see\nEgo4D's documentation"),".\nSee the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/facebookresearch/Ego4d/tree/main/ego4d/features#adding-a-model"},"Feature Extraction\nREADME"),"\nif interested in contributing another model."),(0,n.kt)("h2",{id:"how-features-are-extracted-what-is-input-to-the-model"},"How Features are Extracted (What is Input to the Model)"),(0,n.kt)("p",null,"Here is how each video is extracted:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Features are extracted for each take and camera (",(0,n.kt)("inlineCode",{parentName:"li"},"cam_id"),") and camera stream\n(",(0,n.kt)("inlineCode",{parentName:"li"},"stream_id"),")"),(0,n.kt)("li",{parentName:"ul"},"A stride of 16/30 seconds is used, with a window size 32/30 seconds. ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"If the stride is not divisible by the total duration time, then\nthe last ",(0,n.kt)("inlineCode",{parentName:"li"},"[n - 32/30, n)")," seconds of video is used as the last window.")))),(0,n.kt)("h2",{id:"what-features-are-available"},"What Features are Available"),(0,n.kt)("p",null,"Currently we only extract features from ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/facebookresearch/omnivore/tree/main/omnivore#model-zoo"},"Omnivore\nSwin-L"),"'s\nvideo head (",(0,n.kt)("inlineCode",{parentName:"p"},"omnivore_video"),") using a window size of ~32 frames (more accurately\n32/30 seconds). "),(0,n.kt)("h2",{id:"how-to-read-the-features"},"How to Read the Features"),(0,n.kt)("p",null,"Download with ",(0,n.kt)("inlineCode",{parentName:"p"},"--parts features/omnivore_video"),"."),(0,n.kt)("p",null,"Once downloaded, each feature will be available under\n",(0,n.kt)("inlineCode",{parentName:"p"},"<download-dir>/features/<take_uid>_<cam_id>_<stream_id>.pt"),". Use ",(0,n.kt)("inlineCode",{parentName:"p"},"torch.load")," to load each file. "),(0,n.kt)("p",null,"Where:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"<download-dir>"),": is the directory you download the data to"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"<take_uid>"),": is the identifier for the take"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"<cam_id>"),": is the identifier for the camera, e.g. ",(0,n.kt)("inlineCode",{parentName:"li"},"aria01"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"cam01"),", etc. This is\nsame ID in the ",(0,n.kt)("inlineCode",{parentName:"li"},"captures.json")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"takes.json")," file"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"<stream_id>"),": is the identifier for the video stream. For GoPro cameras this\nwill always be ",(0,n.kt)("inlineCode",{parentName:"li"},"0"),", but for Aria it will only be ",(0,n.kt)("inlineCode",{parentName:"li"},"rgb")," as we do not currently\nextract features from the SLAM (L/R) or Eye cameras")),(0,n.kt)("p",null,"For training purposes, we recommend you pre-process them into a HDF5 dataset, see the function ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/facebookresearch/Ego4d/blob/main/ego4d/research/dataset.py#L47"},(0,n.kt)("inlineCode",{parentName:"a"},"save_ego4d_features_to_hdf5")),"\nto do so and\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/facebookresearch/Ego4d/blob/main/ego4d/research/dataset.py#L13"},"LabelledFeatureDset"),"\nfor usage during training; you can refer to\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/facebookresearch/Ego4d/tree/main/ego4d/research/clep"},"clep"),"\nas an example."))}u.isMDXComponent=!0}}]);